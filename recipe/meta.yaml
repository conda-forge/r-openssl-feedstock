{% set version = "2.3.3" %}
{% set posix = 'm2-' if win else '' %}

package:
  name: r-openssl
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/openssl_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/openssl/openssl_{{ version }}.tar.gz
  sha256: b6b709a98dc3de47ec59adc234d8f0864c4f5b31c5e65478ec5e49c80ba7bf59

build:
  number: 0
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - cross-r-base {{ r_base }}    # [build_platform != target_platform]
    - r-askpass                    # [build_platform != target_platform]
    - {{ compiler('c') }}          # [not win]
    - {{ stdlib("c") }}            # [not win]
    - {{ compiler('m2w64_c') }}    # [win]
    - {{ stdlib("c") }}            # [win]
    - {{ posix }}filesystem        # [win]
    - {{ posix }}sed               # [win]
    - {{ posix }}grep              # [win]
    - {{ posix }}autoconf
    - {{ posix }}automake          # [not win]
    - {{ posix }}automake-wrapper  # [win]
    - {{ posix }}pkg-config
    - {{ posix }}make
    - {{ posix }}coreutils         # [win]
    - {{ posix }}zip               # [win]
  host:
    - r-base
    - openssl
    - r-askpass
  run:
    - r-base
    - r-askpass

test:
  requires:
    - r-testthat >=2.1.0
    - r-curl >=4.3.3
    - r-sodium
  source_files:
    - tests/certigo/
    - tests/google.dk/
    - tests/keys/
    - tests/testthat/
  commands:
    - $R -e "library('openssl')"                                                                  # [not win]
    ## NB: ppc64le failure seems incidental; track https://github.com/conda-forge/r-base-feedstock/issues/366
    - $R -e "testthat::test_dir('tests/testthat/', package='openssl', load_package='installed')"  # [not (win or ppc64le)]
    - "\"%R%\" -e \"library('openssl')\""  # [win]

about:
  home: https://jeroen.r-universe.dev/openssl
  dev_url: https://github.com/jeroen/openssl
  license: MIT
  summary: Bindings to OpenSSL libssl and libcrypto, plus custom SSH key parsers. Supports RSA, DSA and EC curves P-256, P-384, P-521, and curve25519. Cryptographic signatures can either be created and verified manually or via x509 certificates.  AES can be used in cbc, ctr or gcm mode for symmetric encryption; RSA for asymmetric
    (public key) encryption or EC for Diffie Hellman. High-level envelope functions  combine RSA and AES for encrypting arbitrary sized data. Other utilities include key generators, hash functions (md5, sha1, sha256, etc), base64 encoder, a secure random number generator, and 'bignum' math methods for manually performing
    crypto  calculations on large multibyte integers.
  license_family: MIT
  license_file:
    - {{ environ["PREFIX"] }}/lib/R/share/licenses/MIT
    - LICENSE

extra:
  recipe-maintainers:
    - conda-forge/r
